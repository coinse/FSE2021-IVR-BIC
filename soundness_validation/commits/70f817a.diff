commit 70f817ae4f80ac11dd2dfe97babf5896c690fb48
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Jan 27 18:33:55 2011 +0000

    Add basic getters and setters support to TypeInference.
    
    R=nicksantos
    DELTA=573  (533 added, 15 deleted, 25 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=366
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@735 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 52e25f0..615cec4 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -25,6 +25,8 @@ import com.google.javascript.rhino.JSDocInfo;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
 import com.google.javascript.rhino.TokenStream;
+import com.google.javascript.rhino.jstype.FunctionType;
+import com.google.javascript.rhino.jstype.JSType;
 import com.google.javascript.rhino.jstype.TernaryValue;
 
 import java.util.Arrays;
@@ -1863,6 +1865,55 @@ public final class NodeUtil {
   }
 
   /**
+   * Get the name of an object literal key.
+   *
+   * @param key A node
+   */
+  static String getObjectLitKeyName(Node key) {
+    switch (key.getType()) {
+      case Token.NUMBER:
+        return NodeUtil.getStringValue(key);
+      case Token.STRING:
+      case Token.GET:
+      case Token.SET:
+        return key.getString();
+    }
+    throw new IllegalStateException("Unexpected node type: " + key);
+  }
+
+  /**
+   * @param key A OBJECTLIT key node.
+   * @return The type expected when using the key.
+   */
+  static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType) {
+    if (valueType != null) {
+      switch (key.getType()) {
+        case Token.GET:
+          // GET must always return a function type.
+          if (valueType.isFunctionType()) {
+            FunctionType fntype = ((FunctionType) valueType);
+            valueType = fntype.getReturnType();
+          } else {
+            return null;
+          }
+          break;
+        case Token.SET:
+          if (valueType.isFunctionType()) {
+            // SET must always return a function type.
+            FunctionType fntype = ((FunctionType) valueType);
+            Node param = fntype.getParametersNode().getFirstChild();
+            // SET function must always have one parameter.
+            valueType = param.getJSType();
+          } else {
+            return null;
+          }
+          break;
+      }
+    }
+    return valueType;
+  }
+
+  /**
    * Determines whether a node represents an object literal get or set key
    * (e.g. key1 in {get key1() {}, set key2(a){}).
    *
diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 38f3847..5760f79 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -492,25 +492,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         break;
 
       case Token.NUMBER:
-        if (n.getParent().getType() != Token.OBJECTLIT) {
+        // Object literal keys are handled with OBJECTLIT
+        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
           ensureTyped(t, n, NUMBER_TYPE);
-        } else {
-          typeable = false;
         }
         break;
 
-      case Token.ARRAYLIT:
-        ensureTyped(t, n, ARRAY_TYPE);
-        break;
-
       case Token.STRING:
-        if (n.getParent().getType() != Token.OBJECTLIT) {
+        // Object literal keys are handled with OBJECTLIT
+        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
           ensureTyped(t, n, STRING_TYPE);
-        } else {
-          typeable = false;
         }
         break;
 
+      case Token.GET:
+      case Token.SET:
+        // Object literal keys are handled with OBJECTLIT
+        break;
+
+      case Token.ARRAYLIT:
+        ensureTyped(t, n, ARRAY_TYPE);
+        break;
+
       case Token.REGEXP:
         ensureTyped(t, n, REGEXP_TYPE);
         break;
@@ -774,6 +777,11 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
             ensureTyped(t, n);
           }
         }
+        if (n.getType() == Token.OBJECTLIT) {
+          for (Node key : n.children()) {
+            visitObjLitKey(t, key, n);
+          }
+        }
         break;
 
       default:
@@ -927,6 +935,64 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
   }
 
   /**
+   * Visits an object literal field definition <code>key : value</code>.
+   *
+   * If the <code>lvalue</code> is a prototype modification, we change the
+   * schema of the object type it is referring to.
+   *
+   * @param t the traversal
+   * @param key the assign node
+   */
+  private void visitObjLitKey(NodeTraversal t, Node key, Node objlit) {
+    // TODO(johnlenz): Validate get and set function declarations are valid
+    // as is the functions can have "extraneous" bits.
+
+    // For getter and setter property definitions the
+    // rvalue type != the property type.
+    Node rvalue = key.getFirstChild();
+    JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(
+        key, getJSType(rvalue));
+    if (rightType == null) {
+      rightType = getNativeType(UNKNOWN_TYPE);
+    }
+
+    Node owner = objlit;
+
+    // Validate value is assignable to the key type.
+
+    JSType keyType = getJSType(key);
+    boolean valid = validator.expectCanAssignToPropertyOf(t, key,
+        rightType, keyType,
+        owner, NodeUtil.getObjectLitKeyName(key));
+    if (valid) {
+      ensureTyped(t, key, rightType);
+    } else {
+      ensureTyped(t, key);
+    }
+
+    // Validate that the key type is assignable to the object property type.
+    // This is necessary as the objlit may have been cast to a non-literal
+    // object type.
+    // TODO(johnlenz): consider introducing a CAST node to the AST (or
+    // perhaps a parentheses node).
+
+    JSType objlitType = getJSType(objlit);
+    ObjectType type = ObjectType.cast(
+        objlitType.restrictByNotNullOrUndefined());
+    if (type != null) {
+      String property = NodeUtil.getObjectLitKeyName(key);
+      if (type.hasProperty(property) &&
+          !type.isPropertyTypeInferred(property) &&
+          !propertyIsImplicitCast(type, property)) {
+        validator.expectCanAssignToPropertyOf(
+            t, key, keyType,
+            type.getPropertyType(property), owner, property);
+      }
+      return;
+    }
+  }
+
+  /**
    * Returns true if any type in the chain has an implictCast annotation for
    * the given property.
    */
diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index e1567f5..9f776c6 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -702,13 +702,17 @@ class TypeInference
          name = name.getNext()) {
       Node value = name.getFirstChild();
       scope = traverse(value, scope);
-      String memberName = NodeUtil.getStringValue(name);
+      String memberName = NodeUtil.getObjectLitKeyName(name);
       if (memberName != null) {
-        objectType.defineInferredProperty(memberName, getJSType(value), false,
-            name);
+        JSType rawValueType =  name.getFirstChild().getJSType();
+        JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(
+            name, rawValueType);
+        if (valueType == null) {
+          valueType = getNativeType(UNKNOWN_TYPE);
+        }
+        objectType.defineInferredProperty(memberName, valueType, false, name);
       } else {
         n.setJSType(getNativeType(UNKNOWN_TYPE));
-        return scope;
       }
     }
     return scope;
diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index adc4aca..a2dc149 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -488,11 +488,17 @@ final class TypedScopeCreator implements ScopeCreator {
           break;
 
         case Token.STRING:
-          n.setJSType(getNativeType(STRING_TYPE));
+          // Defer keys to the Token.OBJECTLIT case
+          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
+            n.setJSType(getNativeType(STRING_TYPE));
+          }
           break;
 
         case Token.NUMBER:
-          n.setJSType(getNativeType(NUMBER_TYPE));
+          // Defer keys to the Token.OBJECTLIT case
+          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
+            n.setJSType(getNativeType(NUMBER_TYPE));
+          }
           break;
 
         case Token.TRUE:
@@ -557,22 +563,23 @@ final class TypedScopeCreator implements ScopeCreator {
      */
     void processObjectLitProperties(
         NodeTraversal t, Node objLit, ObjectType objLitType) {
-      // TODO(nicksantos): Even if the type of the object literal is null,
-      // we may want to declare its properties in the current scope.
-      if (objLitType == null) {
-        return;
-      }
-
       for (Node name = objLit.getFirstChild(); name != null;
            name = name.getNext()) {
         Node value = name.getFirstChild();
-        String memberName = NodeUtil.getStringValue(name);
-        JSType type = getDeclaredTypeInAnnotation(
+        String memberName = NodeUtil.getObjectLitKeyName(name);
+        JSType valueType = getDeclaredTypeInAnnotation(
             t, name, name.getJSDocInfo());
-        if (type != null) {
-          boolean isExtern = t.getInput() != null && t.getInput().isExtern();
-          objLitType.defineDeclaredProperty(
-              memberName, type, isExtern, name);
+        JSType keyType = NodeUtil.getObjectLitKeyTypeFromValueType(
+            name, valueType);
+        if (keyType != null) {
+          name.setJSType(keyType);
+          // TODO(nicksantos): Even if the type of the object literal is null,
+          // we may want to declare its properties in the current scope.
+          if (objLitType != null) {
+            boolean isExtern = t.getInput() != null && t.getInput().isExtern();
+            objLitType.defineDeclaredProperty(
+                memberName, keyType, isExtern, name);
+          }
         }
       }
     }
@@ -917,8 +924,11 @@ final class TypedScopeCreator implements ScopeCreator {
           Node key = value.getFirstChild();
           while (key != null) {
             String keyName = NodeUtil.getStringValue(key);
-
-            if (enumType.hasOwnProperty(keyName)) {
+            if (keyName == null) {
+              // GET and SET don't have a String value;
+              compiler.report(
+                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));
+            } else if (enumType.hasOwnProperty(keyName)) {
               compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));
             } else if (!codingConvention.isValidEnumKey(keyName)) {
               compiler.report(
diff --git a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java
index 3d531c9..27b192d 100644
--- a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java
@@ -249,9 +249,16 @@ public class AmbiguatePropertiesTest extends CompilerTestCase {
     test(js, output);
   }
 
-  public void testPrototypePropertiesAsObjLitKeys() {
+  public void testPrototypePropertiesAsObjLitKeys1() {
+    test("/** @constructor */ function Bar() {};" +
+             "Bar.prototype = {2: function(){}, getA: function(){}};",
+             "/** @constructor */ function Bar() {};" +
+             "Bar.prototype = {2: function(){}, a: function(){}};");
+  }
+
+  public void testPrototypePropertiesAsObjLitKeys2() {
     testSame("/** @constructor */ function Bar() {};" +
-             "Bar.prototype = {2: function(){}, getA: function(){}};");
+             "Bar.prototype = {2: function(){}, 'getA': function(){}};");
   }
 
   public void testQuotedPrototypeProperty() {
diff --git a/test/com/google/javascript/jscomp/CompilerTypeTestCase.java b/test/com/google/javascript/jscomp/CompilerTypeTestCase.java
index fd53a10..22577c5 100644
--- a/test/com/google/javascript/jscomp/CompilerTypeTestCase.java
+++ b/test/com/google/javascript/jscomp/CompilerTypeTestCase.java
@@ -17,6 +17,7 @@
 
 package com.google.javascript.jscomp;
 
+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
 import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
 
 abstract class CompilerTypeTestCase extends BaseJSTypeTestCase {
@@ -59,6 +60,7 @@ abstract class CompilerTypeTestCase extends BaseJSTypeTestCase {
 
   protected CompilerOptions getOptions() {
     CompilerOptions options = new CompilerOptions();
+    options.languageIn = LanguageMode.ECMASCRIPT5;
     options.setWarningLevel(
         DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);
     options.setCodingConvention(getCodingConvention());
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index c983a00..e58c3b7 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -655,6 +655,166 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "return goog.isString(this.a) ? this.a : 'a'; }", null);
   }
 
+  public void testQualifiedNameReduction5a() throws Exception {
+    testTypes("var x = {/** @type {string} */ a:'b' };\n" +
+        "/** @return {string} */ var f = function() {\n" +
+        "return x.a; }");
+  }
+
+  public void testQualifiedNameReduction5b() throws Exception {
+    testTypes(
+        "var x = {/** @type {number} */ a:12 };\n" +
+        "/** @return {string} */\n" +
+        "var f = function() {\n" +
+        "  return x.a;\n" +
+        "}");  // would like this to be an error.
+  }
+
+  public void testQualifiedNameReduction5c() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {/** @type {number} */ a:0 };\n" +
+        "return (x.a) ? (x.a) : 'a'; }",
+        "inconsistent return type\n" +
+        "found   : (number|string)\n" +
+        "required: string");
+  }
+
+  public void testQualifiedNameReduction6() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {/** @return {string?} */ get a() {return 'a'}};\n" +
+        "return x.a ? x.a : 'a'; }");
+  }
+
+  public void testQualifiedNameReduction7() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {/** @return {number} */ get a() {return 12}};\n" +
+        "return x.a; }",
+        "inconsistent return type\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
+  public void testQualifiedNameReduction7a() throws Exception {
+    // It would be nice to find a way to make this an error.
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {get a() {return 12}};\n" +
+        "return x.a; }");
+  }
+
+  public void testQualifiedNameReduction8() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {get a() {return 'a'}};\n" +
+        "return x.a ? x.a : 'a'; }");
+  }
+
+  public void testQualifiedNameReduction9() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = { /** @param {string} b */ set a(b) {}};\n" +
+        "return x.a ? x.a : 'a'; }");
+  }
+
+  public void testQualifiedNameReduction10() throws Exception {
+    // TODO(johnlenz): separate setter property types from getter property
+    // types.
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = { /** @param {number} b */ set a(b) {}};\n" +
+        "return x.a ? x.a : 'a'; }",
+        "inconsistent return type\n" +
+        "found   : (number|string)\n" +
+        "required: string");
+  }
+
+  public void testObjLitDef1a() throws Exception {
+    testTypes(
+        "var x = {/** @type {number} */ a:12 };\n" +
+        "x.a = 'a';",
+        "assignment to property a of x\n" +
+        "found   : string\n" +
+        "required: number");
+  }
+
+  public void testObjLitDef1b() throws Exception {
+    testTypes(
+        "function f(){" +
+          "var x = {/** @type {number} */ a:12 };\n" +
+          "x.a = 'a';" +
+        "};\n" +
+        "f();",
+        "assignment to property a of x\n" +
+        "found   : string\n" +
+        "required: number");
+  }
+
+  public void testObjLitDef2a() throws Exception {
+    testTypes(
+        "var x = {/** @param {number} b */ set a(b){} };\n" +
+        "x.a = 'a';",
+        "assignment to property a of x\n" +
+        "found   : string\n" +
+        "required: number");
+  }
+
+  public void testObjLitDef2b() throws Exception {
+    testTypes(
+        "function f(){" +
+          "var x = {/** @param {number} b */ set a(b){} };\n" +
+          "x.a = 'a';" +
+        "};\n" +
+        "f();",
+        "assignment to property a of x\n" +
+        "found   : string\n" +
+        "required: number");
+  }
+
+  public void testObjLitDef3a() throws Exception {
+    testTypes(
+        "/** @type {string} */ var y;\n" +
+        "var x = {/** @return {number} */ get a(){} };\n" +
+        "y = x.a;",
+        "assignment\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
+  public void testObjLitDef3b() throws Exception {
+    testTypes(
+      "/** @type {string} */ var y;\n" +
+        "function f(){" +
+          "var x = {/** @return {number} */ get a(){} };\n" +
+          "y = x.a;" +
+        "};\n" +
+        "f();",
+        "assignment\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
+  public void testObjLitDef4() throws Exception {
+    testTypes(
+        "var x = {" +
+          "/** @return {number} */ a:12 };\n",
+          "assignment to property a of {a: function (): number}\n" +
+          "found   : number\n" +
+          "required: function (): number");
+  }
+
+  public void testObjLitDef5() throws Exception {
+    testTypes(
+        "var x = {};\n" +
+        "/** @return {number} */ x.a = 12;\n",
+        "assignment to property a of x\n" +
+        "found   : number\n" +
+        "required: function (): number");
+  }
+
+
   public void testInstanceOfReduction1() throws Exception {
     testTypes("/** @constructor */ var T = function() {};\n" +
         "/** @param {T|string} x\n@return {T} */\n" +
@@ -5650,6 +5810,18 @@ public class TypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testCast16() throws Exception {
+    // A type cast should not invalidate the checks on the members
+    testTypes(
+        "for (var i = 0; i < 10; i++) {" +
+          "var x = /** @type {Object|number} */ (" +
+          "  {/** @type {string} */ foo: 3});" +
+        "}",
+        "assignment to property foo of (Object|null|number)\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
+  public void testCast17() throws Exception {
     // Mostly verifying that rhino actually understands these JsDocs.
     testTypes("/** @constructor */ function Foo() {} \n" +
         "/** @type {Foo} */ var x = /** @type {Foo} */ ({})");
diff --git a/test/com/google/javascript/jscomp/TypeInferenceTest.java b/test/com/google/javascript/jscomp/TypeInferenceTest.java
index 35862b9..ff95c8e 100644
--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java
+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java
@@ -32,6 +32,7 @@ import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
 import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
 import com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.jstype.EnumType;
@@ -66,7 +67,9 @@ public class TypeInferenceTest extends TestCase {
   @Override
   public void setUp() {
     compiler = new Compiler();
-    compiler.initOptions(new CompilerOptions());
+    CompilerOptions options = new CompilerOptions();
+    options.languageIn = LanguageMode.ECMASCRIPT5;
+    compiler.initOptions(options);
     registry = compiler.getTypeRegistry();
     assumptions = Maps.newHashMap();
     returnScope = null;
@@ -751,4 +754,30 @@ public class TypeInferenceTest extends TestCase {
                + "try { throw new Error(x = 3); } catch (ex) {}");
     verify("x", NUMBER_TYPE);
   }
+
+  public void testObjectLit() {
+    inFunction("var x = {}; var out = x.a;");
+    verify("out", UNKNOWN_TYPE);  // Shouldn't this be 'undefined'?
+
+    inFunction("var x = {a:1}; var out = x.a;");
+    verify("out", NUMBER_TYPE);
+
+    inFunction("var x = { get a() {return 1} }; var out = x.a;");
+    verify("out", UNKNOWN_TYPE);
+
+    inFunction(
+        "var x = {" +
+        "  /** @return {number} */ get a() {return 1}" +
+        "};" +
+        "var out = x.a;");
+    verify("out", NUMBER_TYPE);
+
+    inFunction("var x = { set a(b) {} }; var out = x.a;");
+    verify("out", UNKNOWN_TYPE);
+
+    inFunction("var x = { " +
+            "/** @param {number} b */ set a(b) {} };" +
+            "var out = x.a;");
+    verify("out", NUMBER_TYPE);
+  }
 }
diff --git a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
index 3cfaa8c..d18d476 100644
--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
@@ -118,7 +118,7 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertEquals(Lists.newArrayList(foo), registry.getTypesWithProperty("Bar"));
   }
 
-  public void testInferredProperty() {
+  public void testInferredProperty1() {
     testSame("var foo = {}; foo.Bar = 3;");
     ObjectType foo = (ObjectType) findNameType("foo", globalScope);
     assertTrue(foo.toString(), foo.hasProperty("Bar"));
@@ -126,6 +126,70 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertTrue(foo.isPropertyTypeInferred("Bar"));
   }
 
+  public void testInferredProperty1a() {
+    testSame("var foo = {}; /** @type {number} */ foo.Bar = 3;");
+    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
+    assertTrue(foo.toString(), foo.hasProperty("Bar"));
+    assertEquals("number", foo.getPropertyType("Bar").toString());
+    assertFalse(foo.isPropertyTypeInferred("Bar"));
+  }  
+
+  public void testInferredProperty2() {
+    testSame("var foo = { Bar: 3 };");
+    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
+    assertTrue(foo.toString(), foo.hasProperty("Bar"));
+    assertEquals("number", foo.getPropertyType("Bar").toString());
+    assertTrue(foo.isPropertyTypeInferred("Bar"));
+  }  
+
+  public void testInferredProperty2b() {
+    testSame("var foo = { /** @type {number} */ Bar: 3 };");
+    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
+    assertTrue(foo.toString(), foo.hasProperty("Bar"));
+    assertEquals("number", foo.getPropertyType("Bar").toString());
+    assertFalse(foo.isPropertyTypeInferred("Bar"));
+  }  
+
+  public void testInferredProperty2c() {
+    testSame("var foo = { /** @return {number} */ Bar: 3 };");
+    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
+    assertTrue(foo.toString(), foo.hasProperty("Bar"));
+    assertEquals("function (): number", foo.getPropertyType("Bar").toString());
+    assertFalse(foo.isPropertyTypeInferred("Bar"));
+  }  
+
+  public void testInferredProperty3() {
+    testSame("var foo = { /** @type {number} */ get Bar() { return 3 } };");
+    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
+    assertTrue(foo.toString(), foo.hasProperty("Bar"));
+    assertEquals("?", foo.getPropertyType("Bar").toString());
+    assertTrue(foo.isPropertyTypeInferred("Bar"));
+  }
+
+  public void testInferredProperty4() {
+    testSame("var foo = { /** @type {number} */ set Bar(a) {} };");
+    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
+    assertTrue(foo.toString(), foo.hasProperty("Bar"));
+    assertEquals("?", foo.getPropertyType("Bar").toString());
+    assertTrue(foo.isPropertyTypeInferred("Bar"));
+  }  
+
+  public void testInferredProperty5() {
+    testSame("var foo = { /** @return {number} */ get Bar() { return 3 } };");
+    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
+    assertTrue(foo.toString(), foo.hasProperty("Bar"));
+    assertEquals("number", foo.getPropertyType("Bar").toString());
+    assertFalse(foo.isPropertyTypeInferred("Bar"));
+  }
+
+  public void testInferredProperty6() {
+    testSame("var foo = { /** @param {number} a */ set Bar(a) {} };");
+    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
+    assertTrue(foo.toString(), foo.hasProperty("Bar"));
+    assertEquals("number", foo.getPropertyType("Bar").toString());
+    assertFalse(foo.isPropertyTypeInferred("Bar"));
+  }   
+
   public void testPrototypeInit() {
     testSame("/** @constructor */ var Foo = function() {};" +
         "Foo.prototype = {bar: 1}; var foo = new Foo();");
@@ -135,7 +199,7 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertTrue(foo.isPropertyTypeInferred("bar"));
   }
 
-  public void testInferredPrototypeProperty() {
+  public void testInferredPrototypeProperty1() {
     testSame("/** @constructor */ var Foo = function() {};" +
         "Foo.prototype.bar = 1; var x = new Foo();");
 
@@ -145,6 +209,16 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertTrue(x.isPropertyTypeInferred("bar"));
   }
 
+  public void testInferredPrototypeProperty2() {
+    testSame("/** @constructor */ var Foo = function() {};" +
+        "Foo.prototype = {bar: 1}; var x = new Foo();");
+
+    ObjectType x = (ObjectType) findNameType("x", globalScope);
+    assertTrue(x.hasProperty("bar"));
+    assertEquals("number", x.getPropertyType("bar").toString());
+    assertTrue(x.isPropertyTypeInferred("bar"));
+  }
+
   public void testEnum() {
     testSame("/** @enum */ var Foo = {BAR: 1}; var f = Foo;");
     ObjectType f = (ObjectType) findNameType("f", globalScope);
@@ -271,7 +345,7 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertFalse(x.isPropertyTypeInferred("foo"));
   }
 
-  public void testPropertyOnUnknownSuperClass() {
+  public void testPropertyOnUnknownSuperClass1() {
     testSame(
         "var goog = this.foo();" +
         "/** @constructor \n * @extends {goog.Unknown} */" +
@@ -286,7 +360,23 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertTrue(x.isPropertyTypeInferred("bar"));
   }
 
-  public void testMethodBeforeFunction() throws Exception {
+  public void testPropertyOnUnknownSuperClass2() {
+    testSame(
+        "var goog = this.foo();" +
+        "/** @constructor \n * @extends {goog.Unknown} */" +
+        "function Foo() {}" +
+        "Foo.prototype = {bar: 1};" +
+        "var x = new Foo();",
+        RhinoErrorReporter.PARSE_ERROR);
+    ObjectType x = (ObjectType) findNameType("x", globalScope);
+    assertEquals("Foo", x.toString());
+    // Should be true
+    assertFalse(x.getImplicitPrototype().hasOwnProperty("bar"));
+    assertEquals("number", x.getPropertyType("bar").toString());
+    assertTrue(x.isPropertyTypeInferred("bar"));
+  }
+
+  public void testMethodBeforeFunction1() throws Exception {
     testSame(
         "var y = Window.prototype;" +
         "Window.prototype.alert = function(message) {};" +
@@ -305,6 +395,28 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
         y.getPropertyType("alert").toString());
   }
 
+  public void testMethodBeforeFunction2() throws Exception {
+    testSame(
+        "var y = Window.prototype;" +
+        "Window.prototype = {alert: function(message) {}};" +
+        "/** @constructor */ function Window() {}\n" +
+        "var window = new Window(); \n" +
+        "var x = window;");
+    ObjectType x = (ObjectType) findNameType("x", globalScope);
+    assertEquals("Window", x.toString());
+    // This should be TRUE
+    assertFalse(x.getImplicitPrototype().hasOwnProperty("alert"));
+    /*
+    assertEquals("function (this:Window, ?): undefined",
+        x.getPropertyType("alert").toString());
+    assertTrue(x.isPropertyTypeDeclared("alert"));
+
+    ObjectType y = (ObjectType) findNameType("y", globalScope);
+    assertEquals("function (this:Window, ?): undefined",
+        y.getPropertyType("alert").toString());
+    */
+  }
+
   public void testAddMethodsPrototypeTwoWays() throws Exception {
     testSame(
         "/** @constructor */function A() {}" +
@@ -383,6 +495,33 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());
   }
 
+  public void testPropertiesOnInterface2() throws Exception {
+    testSame("/** @interface */ var I = function() {};" +
+        "I.prototype = {baz: function(){}};" +
+        "/** @type {number} */ I.prototype.bar;");
+
+    Var i = globalScope.getVar("I");
+    assertEquals("function (this:I): ?", i.getType().toString());
+    assertTrue(i.getType().isInterface());
+
+    ObjectType iPrototype = (ObjectType)
+        ((ObjectType) i.getType()).getPropertyType("prototype");
+    assertEquals("I.prototype", iPrototype.toString());
+    assertTrue(iPrototype.isFunctionPrototypeType());
+
+    assertEquals("number", iPrototype.getPropertyType("bar").toString());
+    
+    // should be: "function (this:I): undefined"
+    assertEquals("function (): undefined",
+        iPrototype.getPropertyType("baz").toString());
+
+    // should not be null 
+    assertNull(globalScope.getVar("I.prototype"));
+    // assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());
+  }
+
+  // TODO(johnlenz): A syntax for stubs using object literals?
+
   public void testStubsInExterns() {
     testSame(
         "/** @constructor */ function Extern() {}" +
@@ -545,7 +684,7 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertFalse(a.hasProperty("name"));
   }
 
-  public void testGlobalThis() {
+  public void testGlobalThis1() {
     testSame(
         "/** @constructor */ function Window() {}" +
         "Window.prototype.alert = function() {};" +
@@ -560,7 +699,24 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertTrue(x.hasProperty("alert"));
   }
 
+  public void testGlobalThis2() {
+    testSame(
+        "/** @constructor */ function Window() {}" +
+        "Window.prototype = {alert: function() {}};" +
+        "var x = this;");
+
+    ObjectType x = (ObjectType) (globalScope.getVar("x").getType());
+    FunctionType windowCtor =
+        (FunctionType) (globalScope.getVar("Window").getType());
+    assertEquals("global this", x.toString());
+    assertTrue(x.isSubtype(windowCtor.getInstanceType()));
+    assertFalse(x.equals(windowCtor.getInstanceType()));
+    assertTrue(x.hasProperty("alert"));
+  }
+
   public void testObjectLiteralCast() {
+    // Verify that "goog.reflect.object" does not modify the types on
+    // "A.B"
     testSame("/** @constructor */ A.B = function() {}\n" +
              "A.B.prototype.isEnabled = true;\n" +
              "goog.reflect.object(A.B, {isEnabled: 3})\n" +
@@ -713,6 +869,27 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
         findNameType("y", globalScope).toString());
   }
 
+  public void testAbstractMethod4() {
+    testSame(
+        "/** @type {!Function} */ var abstractMethod;" +
+        "/** @constructor */ function Foo() {}" +
+        "Foo.prototype = {/** @param {number} x */ bar: abstractMethod};");
+    assertEquals(
+        "Function", findNameType("abstractMethod", globalScope).toString());
+
+    FunctionType ctor = (FunctionType) findNameType("Foo", globalScope);
+    ObjectType instance = ctor.getInstanceType();
+    assertEquals("Foo", instance.toString());
+
+    ObjectType proto = instance.getImplicitPrototype();
+    assertEquals("Foo.prototype", proto.toString());
+
+    assertEquals(
+        // should be: "function (this:Foo, number): ?"
+        "function (number): ?",  
+        proto.getPropertyType("bar").toString());
+  }
+
   public void testActiveXObject() {
     testSame(
         CompilerTypeTestCase.ACTIVE_X_OBJECT_DEF,
